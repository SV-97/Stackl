
digraph AST {
    rankdir = LR;
    compound = true;
    labelloc = "t";
    label = <<B>Syntax-Tree</B><BR/>Read left to right top to bottom>;

    program1[label="Program"];
    assignment1[label="="];
    program1 -> assignment1;
    identifier1[label="abcd"];
    assignment1 -> identifier1;
    binary1[label="+"];
    assignment1 -> binary1;
    float1[label="5"];
    binary1 -> float1;
    integer1[label="10"];
    binary1 -> integer1;
    assignment2[label="="];
    program1 -> assignment2;
    identifier2[label="b"];
    assignment2 -> identifier2;
    float2[label="1"];
    assignment2 -> float2;
    if1[shape=record, label="<if>if|<then>then|<else>else"];
    program1 -> if1;
  edge[tailport=if];
    binary2[label=">="];
    if1 -> binary2;
    binary3[label="+"];
    binary2 -> binary3;
    identifier3[label="abcd"];
    binary3 -> identifier3;
    identifier4[label="b"];
    binary3 -> identifier4;
    integer2[label="3"];
    binary2 -> integer2;
  edge[tailport=then];
    block1[label="Block"];
    if1 -> block1;
    identifier5[label="print"];
    block1 -> identifier5;
    expression1[label="Expression"];
    block1 -> expression1;
    identifier6[label="a"];
    expression1 -> identifier6;
  edge[tailport=else];
    empty1[label=""];
    if1 -> empty1;
  edge[tailport=""];
    assignment3[label="="];
    program1 -> assignment3;
    identifier7[label="c"];
    assignment3 -> identifier7;
    bool1[label="true"];
    assignment3 -> bool1;
    if2[shape=record, label="<if>if|<then>then|<else>else"];
    program1 -> if2;
  edge[tailport=if];
    binary4[label="and"];
    if2 -> binary4;
    binary5[label="!="];
    binary4 -> binary5;
    unary1[label="not"];
    binary5 -> unary1;
    identifier8[label="abcd"];
    unary1 -> identifier8;
    identifier9[label="b"];
    binary5 -> identifier9;
    identifier10[label="c"];
    binary4 -> identifier10;
  edge[tailport=then];
    block2[label="Block"];
    if2 -> block2;
    identifier11[label="print"];
    block2 -> identifier11;
    expression2[label="Expression"];
    block2 -> expression2;
    identifier12[label="b"];
    expression2 -> identifier12;
  edge[tailport=else];
    empty2[label=""];
    if2 -> empty2;
  edge[tailport=""];
}
